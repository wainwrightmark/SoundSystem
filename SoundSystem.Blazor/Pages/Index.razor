@page "/"
@inject IJSRuntime _js
@inject ISnackbar _Snackbar;

<PageTitle>Index</PageTitle>


<MudTextField @bind-Value="SystemText" Lines="5"/>
<MudInput T="int" @bind-Value="@BPM"/>

<MudTextField T="string" Variant="Variant.Outlined" @bind-Text="@ABCText" Lines="5"/>


<MudButton OnClick="Play">Play</MudButton>

<div class="container">
    <div id="paper"></div>
</div>


@code{

    
    
    private int _bpm = 100;

    private Tone _keyTone = Tone.C;

    public Tone KeyTone
    {
        get => _keyTone;
        set => _keyTone = value;
    }

    public int BPM
    {
        get => _bpm;
        set
        {
            _bpm = value;
            SetOutputJson();
        }
    }

    private const string defaultSystemText = "Chords C Major 1, 4, 5, 1;voice 'bass' 33 rhy 3, 3, 2 arp 3 asc 3 1;voice 'piano' 5 rhy 1 block 5 1 2";
    private string _systemText = defaultSystemText;

    public string SystemText
    {
        get { return _systemText; }
        set
        {
            _systemText = value;
            var musicSystemResult = Parser.Parse(_systemText);
            if (musicSystemResult.IsSuccess)
            {
                musicSystem = musicSystemResult.Value;
                SetOutputJson();
            }
            else
            {
                _Snackbar.Add(musicSystemResult.Error, Severity.Error);
            }
        }
    }

    private MusicSystem musicSystem = Parser.Parse(defaultSystemText).Value;

    private void SetOutputJson()
    {
        ABCText = musicSystem.ToABC("My Song", 12, BPM);
    //ABCText =  ConvertToAbc.Convert(_inputText, _bpm, new KeyMode(_keyTone, Mode.Major.Instance), _pronunciationEngine.Value, Voices);
    }
    

    /// <inheritdoc />
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        await base.OnAfterRenderAsync(firstRender);

        if (firstRender)
        {
            await _js.InvokeVoidAsync("load", ABCText);
        }
    }

    /// <inheritdoc />
    protected override void OnInitialized()
    {
        base.OnInitialized();
        SetOutputJson();
    }

    private string _abcText;

    public string ABCText
    {
        get => _abcText;
        set
        {
            _abcText = value;
            _js.InvokeVoidAsync("load", value);
        }
    }

    public async Task Play()
    {
        await _js.InvokeVoidAsync("play");
    }

    private double _animatedTime = 0;

    private MudTextField<string> inputTextReference;


    [JSInvokable("AnimateTime")]
    public ValueTask AnimateTime(double time)
    {
        var pos1 = Convert.ToInt32((time * 2 - 1) * 5);
        return inputTextReference.SelectRangeAsync(pos1, pos1 + 5);
    }

}